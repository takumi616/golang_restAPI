・ResponseWrietrインターフェース
ResponseWriter is the interface that is used by handler to make http response.
type ResponseWriter interface {
    Header() Header
    Write([]byte) (int, error)
    WriteHeader(statusCode int)
}

Headerメソッド
　Header（type Header map[string][]string）を返す。
　Setメソッドでヘッダ（key-valueペア）をセット、Addメソッドでヘッダを追加、Getメソッドでキーを引数にヘッダの値を取得など。
　w.Header().Set("Content-Type", "application/json")
　w.Header().Get("Content-Type")  //output: application/json

Writeメソッド
　レスポンスボディにデータを書き込むメソッド。書き込みたいデータをバイト配列で渡すことに注意。
　WriteHeaderメソッドを呼び出していない場合は、データをレスポンスボディに書き込む前にステータスコード200がデフォルトで送信される。
　ヘッダーがContent-Typeを含まない場合、書き込まれたデータの最初の512バイトでContent-Typeを判定する。

WriteHeaderメソッド
　HTTPステータスコードを引数にとり、レスポンスにかきこむ。
　WriteHeaderメソッドを呼び出した後にヘッダーに書き込むことはできないが、レスポンスボディに書き込むことは可能。

公式ドキュメント↓
type ResponseWriter interface {
	// Header returns the header map that will be sent by
	// WriteHeader. The Header map also is the mechanism with which
	// Handlers can set HTTP trailers.
	//
	// Changing the header map after a call to WriteHeader (or
	// Write) has no effect unless the HTTP status code was of the
	// 1xx class or the modified headers are trailers.
	//
	// There are two ways to set Trailers. The preferred way is to
	// predeclare in the headers which trailers you will later
	// send by setting the "Trailer" header to the names of the
	// trailer keys which will come later. In this case, those
	// keys of the Header map are treated as if they were
	// trailers. See the example. The second way, for trailer
	// keys not known to the Handler until after the first Write,
	// is to prefix the Header map keys with the TrailerPrefix
	// constant value. See TrailerPrefix.
	//
	// To suppress automatic response headers (such as "Date"), set
	// their value to nil.
	Header() Header

	// Write writes the data to the connection as part of an HTTP reply.
	//
	// If WriteHeader has not yet been called, Write calls
	// WriteHeader(http.StatusOK) before writing the data. If the Header
	// does not contain a Content-Type line, Write adds a Content-Type set
	// to the result of passing the initial 512 bytes of written data to
	// DetectContentType. Additionally, if the total size of all written
	// data is under a few KB and there are no Flush calls, the
	// Content-Length header is added automatically.
	//
	// Depending on the HTTP protocol version and the client, calling
	// Write or WriteHeader may prevent future reads on the
	// Request.Body. For HTTP/1.x requests, handlers should read any
	// needed request body data before writing the response. Once the
	// headers have been flushed (due to either an explicit Flusher.Flush
	// call or writing enough data to trigger a flush), the request body
	// may be unavailable. For HTTP/2 requests, the Go HTTP server permits
	// handlers to continue to read the request body while concurrently
	// writing the response. However, such behavior may not be supported
	// by all HTTP/2 clients. Handlers should read before writing if
	// possible to maximize compatibility.
	Write([]byte) (int, error)

	// WriteHeader sends an HTTP response header with the provided
	// status code.
	//
	// If WriteHeader is not called explicitly, the first call to Write
	// will trigger an implicit WriteHeader(http.StatusOK).
	// Thus explicit calls to WriteHeader are mainly used to
	// send error codes or 1xx informational responses.
	//
	// The provided code must be a valid HTTP 1xx-5xx status code.
	// Any number of 1xx headers may be written, followed by at most
	// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx
	// headers may be buffered. Use the Flusher interface to send
	// buffered data. The header map is cleared when 2xx-5xx headers are
	// sent, but not with 1xx headers.
	//
	// The server will automatically send a 100 (Continue) header
	// on the first read from the request body if the request has
	// an "Expect: 100-continue" header.
	WriteHeader(statusCode int)
}

・Request構造体
type Request struct {
	Method string

	URL *url.URL

	Proto      string // "HTTP/1.0"
	ProtoMajor int    // 1
	ProtoMinor int    // 0

	Header Header
	
	Body io.ReadCloser

	GetBody func() (io.ReadCloser, error)

	ContentLength int64

	TransferEncoding []string

	Close bool

	Host string

	Form url.Values

	PostForm url.Values

	MultipartForm *multipart.Form

	Trailer Header

	RemoteAddr string

	RequestURI string

	Cancel <-chan struct{}

	Response *Response
	
}

URLフィールドはリクエスト行の１行目に書き込まれるURLを表す。
type URL struct {
	Scheme      string
	Opaque      string    // encoded opaque data
	User        *Userinfo // username and password information
	Host        string    // host or host:port
	Path        string    // path (relative paths may omit leading slash)
	RawPath     string    // encoded path hint (see EscapedPath method)
	OmitHost    bool      // do not emit empty host (authority)
	ForceQuery  bool      // append a query ('?') even if RawQuery is empty
	RawQuery    string    // encoded query values, without '?'
	Fragment    string    // fragment for references, without '#'
	RawFragment string    // encoded fragment hint (see EscapedFragment method)
}

import (
	"fmt"
	"log"
	"net/url"
)

func main() {
	u, err := url.Parse("http://bing.com/search?q=dotnet")
	if err != nil {
		log.Fatal(err)
	}
	u.Scheme = "https"
	u.Host = "exmaple.com"
	q := u.Query()
	q.Set("q", "golang")
	u.RawQuery = q.Encode()
	fmt.Println(u)
}
output: https://example.com/search?q=golang

HeaderフィールドはHeaderマップを返す。Hostヘッダーに関してはHostフィールドからアクセスできる。
    Host: example.com
	accept-encoding: gzip, deflate
	Accept-Language: en-us
	fOO: Bar
	foo: two
	
	Header = map[string][]string{
		"Accept-Encoding": {"gzip, deflate"},
		"Accept-Language": {"en-us"},
		"Foo": {"Bar", "two"},
	}

Bodyフィールドはリクエストボディ。Body （io.ReadCloser型）
type ReadCloser interface {
	Reader
	Closer
}
type Reader interface {
	Read(p []byte) (n int, err error)
}

.gorilla mux
go get -u github.com/gorilla/mux
ドキュメント：　https://pkg.go.dev/github.com/gorilla/mux

Vars returns the route variables for the current request, if any.
func Vars(r *http.Request) map[string]string

例）r := mux.NewRouter()

r.HandleFunc("/tasks/{id}", getSingleTask).Methods("GET")
func getSingleTask(w http.ResponseWriter, r *http.Request) {
    paramMap := mux.Vars(r)
    id := paramMap["id"]
}


	
	

    